var iconv = require("iconv-lite");

const BUILD_COUNTER=12

const autoIncreaseBuildCounter=function(){
    const fs = require("fs");
    const path = require('path');
    var data=null;
    fs.readFile(__filename,(err,_data) =>{
        if(err){
            console.log(err);
            return;
        }
        data=String(_data);
        console.log(data);
        console.log(_data);
        const pattern=/(const BUILD_COUNTER=)(\d+)/;
        if(pattern.test(data)){
            const res=data.match(pattern);
            const counter=Number(res[2])+1;
            data=data.replace(pattern,"$1"+counter);
            fs.writeFile(__filename,data);
        }
    });
}();

function generateParamConfig(){
    var label1="typedef struct _Param{\r\n@label}Param;\r\n";
    var label2="const char* paramName[]={\r\n@label};\r\n";
    var label3="const int defaultParam[]={\r\n@label};\r\n";

    var ids="";
    var names="";
    var dvs="";

    function addItem(id,defaultValue,name=""){
        ids += "    int " +id+";\r\n";
        names += "    \"" + name + "\",\r\n";
        dvs += "    " + defaultValue + ",\r\n";
    }
        
    addItem("version",BUILD_COUNTER);
    addItem("firstCargoStep",22000,"最底层货道的位置");
    addItem("firstCodeStep",29750,"最底层条形码的位置");
    addItem("cargoDeltaStep",9750,"货道高度间隔");
    addItem("xPushStep",125500,"X轴推出距离");
    addItem("xInitStep",800,"X轴就绪位置");
    addItem("xAccel",250000,"X轴加速度");
    addItem("xSpeed",30000,"X轴速度");
    addItem("xHomeAccel",100000,"X轴归位加速度");
    addItem("xHomeSpeed",10000,"X轴归位速度");
    addItem("yAccel",500000,"Y轴加速度");
    addItem("ySpeed",50000,"Y轴速度");
    addItem("yHomeAccel",50000,"Y轴归位加速度");
    addItem("yHomeSpeed",20000,"Y轴归位速度");


    var output="//this file is auto generated by preprocessor.js, do not modify it manually\r\n";
    output += label1.replace("@label",ids);
    output += "#ifdef _PARAM_C_\r\n";
    output += label2.replace("@label",names);
    output += label3.replace("@label",dvs);
    output += "#endif\r\n\r\n";

    var fs = require("fs");
    fs.writeFile('autogenerated_param.h', iconv.encode(Buffer.from(output),'gbk'), 'ascii');
};
generateParamConfig();



//---------------------------------------------------
function generateBspGpioConfig(){
    var templateDef="typedef struct _BspGpios{\r\n@label}BspGpios;\r\n";
    var templateArray="static gpio_t _bspGpios[]={\r\n@label};\r\n";
    var templateNames="static const char* _bspGpiosName[]={\r\n@label};\r\n";

    var def="";
    var array="";
    var names="";

    function addItem(id,value,name=""){
        def   += "    gpio_t " + id + ";\r\n";
        array += "    "+ value + ",\r\n";
        names += "    \"" + name + "\",\r\n";
    }
            
    //            name             base    pin       Out/In Invert InitState
    addItem("microwave",         "{GPIOB,GPIO_Pin_13, true , false, false }", "微波使能");
    addItem("microwave_detect",  "{GPIOE,GPIO_Pin_0 , false, false, false }", "微波检测");
    addItem("fridge",            "{GPIOD,GPIO_Pin_12, true , false, false }", "冰箱使能");
    addItem("light",             "{GPIOE,GPIO_Pin_2 , true , false, false }", "照明灯");
    addItem("oxygen",            "{GPIOD,GPIO_Pin_10, true , false, false }", "臭氧发生器");
    addItem("motorY_power",      "{GPIOD,GPIO_Pin_11, true , false, true  }", "Y轴电机电源");
    addItem("coldfan",           "{GPIOB,GPIO_Pin_12, true , false, false }", "风扇");
    addItem("decoder1_power",    "{GPIOD,GPIO_Pin_14, true , false, false }", "扫码器-电源");
    addItem("decoder2_power",    "{GPIOD,GPIO_Pin_15, true , false, false }", "扫码器+电源");
    addItem("shelve1_detect",    "{GPIOB,GPIO_Pin_7 , false, false, false }", "货架检测+");
    addItem("shelve2_detect",    "{GPIOB,GPIO_Pin_8 , false, false, false }", "货架检测-");
    addItem("door_detect",       "{GPIOB,GPIO_Pin_6 , false, false, false }", "开门检测");
    addItem("tray_detect",       "{GPIOE,GPIO_Pin_1 , false, false, false }", "托盘检测");
    addItem("exit_detect",       "{GPIOB,GPIO_Pin_9 , false, false, false }", "出货口检测");
    addItem("UVB_power",         "{GPIOE,GPIO_Pin_4 , true , false, false }", "紫外灯");
    addItem("lock_power",        "{GPIOE,GPIO_Pin_3 , true , false, false }", "出货口锁");
    addItem("exitDetect_power",  "{GPIOE,GPIO_Pin_5 , true , false, true  }", "出货口检测电源");
    addItem("button1",           "{GPIOC,GPIO_Pin_9 , false, false, false }", "按键1");
    addItem("button2",           "{GPIOA,GPIO_Pin_12, false, false, false }", "按键2");
    addItem("brake",             "{GPIOB,GPIO_Pin_15, true , false ,false} ", "Y轴电机抱闸(1:解锁,0:锁定)");
    addItem("motor_error",       "{GPIOC,GPIO_Pin_10, false, false, false }", "Y轴电机错误");
    
    addItem("minProbeXp",     "{GPIOD,GPIO_Pin_7 , false,  false , false }", "X+归位开关");
    addItem("minProbeXm",     "{GPIOB,GPIO_Pin_3 , false,  false , false }", "X-归位开关");
    addItem("minProbeY",      "{GPIOB,GPIO_Pin_5 , false,  false , false }", "Y-归位开关");
    //addItem("maxProbeXp",     "{GPIOD,GPIO_Pin_7 , false,  false , false }");
    //addItem("maxProbeXm",     "{GPIOB,GPIO_Pin_3 , false,  false , false }");
    addItem("maxProbeY",      "{GPIOB,GPIO_Pin_4 , false,  false , false }", "Y+归位开关");
    

    var output="//this file is auto generated by preprocessor.js, do not modify it manually\r\n\r\n";
    output += templateDef.replace("@label",def);
    output += "\r\n#ifdef _BSP_C_\r\n";
    output += templateArray.replace("@label",array);
    output += "\r\n";
    output += templateNames.replace("@label",names);
    output += "#endif\r\n\r\n";

    var fs = require("fs");
    fs.writeFile('autogenerated_gpio.h', iconv.encode(Buffer.from(output),'gbk'), 'ascii');
};
generateBspGpioConfig();


